<?php
namespace MikrotikBackup\Notifier;

class Telegram 
{
    private $botToken;
    private $chatId;
    private $logger;
    
    public function __construct(array $config, $logger) 
    {
        if (empty($config['telegram_bot_token'])) {
            throw new \RuntimeException('–ù–µ –∑–∞–¥–∞–Ω telegram_bot_token –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
        if (empty($config['telegram_chat_id'])) {
            throw new \RuntimeException('–ù–µ –∑–∞–¥–∞–Ω telegram_chat_id –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }

        $this->botToken = $config['telegram_bot_token'];
        $this->chatId = $config['telegram_chat_id'];
        $this->logger = $logger;
        
        $this->logger->debug('telegram', sprintf(
            'Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: bot_token="%s", chat_id="%s"',
            substr($this->botToken, 0, 10) . '...',
            $this->chatId
        ));
    }
    
    public function sendMessage(string $message): void 
    {
        try {
            $this->logger->debug('telegram', 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (empty($this->botToken)) {
                throw new \RuntimeException('–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
            }
            if (empty($this->chatId)) {
                throw new \RuntimeException('–ù–µ –∑–∞–¥–∞–Ω ID —á–∞—Ç–∞');
            }
            if (empty($message)) {
                throw new \RuntimeException('–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            }

            $this->logger->debug('telegram', sprintf(
                '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: bot_token="%s", chat_id="%s", message_length=%d',
                substr($this->botToken, 0, 10) . '...',
                $this->chatId,
                strlen($message)
            ));

            $url = "https://api.telegram.org/bot{$this->botToken}/sendMessage";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            $this->logger->debug('telegram', 'URL –∑–∞–ø—Ä–æ—Å–∞: ' . str_replace($this->botToken, '***', $url));
            
            $data = [
                'chat_id' => $this->chatId,
                'text' => $message,
                'parse_mode' => 'HTML'
            ];

            $this->logger->debug('telegram', '–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');

            $ch = curl_init();
            curl_setopt_array($ch, [
                CURLOPT_URL => $url,
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_SSL_VERIFYPEER => true,
                CURLOPT_TIMEOUT => 10,
                CURLOPT_VERBOSE => false,
                CURLOPT_SSL_VERIFYHOST => 2,
                CURLOPT_HEADER => false
            ]);

            $this->logger->debug('telegram', 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram...');
            
            $response = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $error = curl_error($ch);
            
            $this->logger->debug('telegram', sprintf(
                '–û—Ç–≤–µ—Ç –æ—Ç Telegram: code=%d, response="%s", error="%s"',
                $httpCode,
                substr($response, 0, 100),
                $error
            ));

            if ($error) {
                throw new \RuntimeException('–û—à–∏–±–∫–∞ CURL: ' . $error);
            }

            if ($httpCode !== 200) {
                throw new \RuntimeException(sprintf(
                    '–û—à–∏–±–∫–∞ HTTP %d: %s', 
                    $httpCode, 
                    $response
                ));
            }

            $result = json_decode($response, true);
            if (!$result['ok']) {
                throw new \RuntimeException(sprintf(
                    '–û—à–∏–±–∫–∞ API: %s', 
                    $result['description'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                ));
            }

            $this->logger->debug('telegram', '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        } catch (\Exception $e) {
            $this->logger->error('telegram', '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ' . $e->getMessage());
            throw $e;
        } finally {
            if (isset($ch)) {
                curl_close($ch);
            }
        }
    }

    public function sendBackupReport(string $backupPath): void 
    {
        $this->logger->debug('telegram', 'üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±—ç–∫–∞–ø–∞—Ö');
        $this->logger->debug('telegram', sprintf(
            '–ü—É—Ç—å –∫ –±—ç–∫–∞–ø–∞–º: %s (exists=%s, is_readable=%s, is_dir=%s)',
            $backupPath,
            file_exists($backupPath) ? 'yes' : 'no',
            is_readable($backupPath) ? 'yes' : 'no',
            is_dir($backupPath) ? 'yes' : 'no'
        ));

        $devices = [];
        $directories = glob("{$backupPath}/*", GLOB_ONLYDIR);
        
        $this->logger->debug('telegram', sprintf(
            '–ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: %d (%s)',
            count($directories),
            implode(', ', array_map('basename', $directories))
        ));

        foreach ($directories as $deviceDir) {
            $this->logger->debug('telegram', sprintf(
                '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %s (exists=%s, is_readable=%s)',
                $deviceDir,
                is_dir($deviceDir) ? 'yes' : 'no',
                is_readable($deviceDir) ? 'yes' : 'no'
            ));
            
            $backupFiles = glob("$deviceDir/*.backup");
            $this->logger->debug('telegram', sprintf(
                '–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤: %d (%s)',
                count($backupFiles),
                implode(', ', array_map('basename', $backupFiles))
            ));
            
            if (empty($backupFiles)) {
                $this->logger->debug('telegram', '–ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤');
                continue;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            usort($backupFiles, function($a, $b) {
                return filemtime($b) - filemtime($a);
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
            $latestBackup = basename($backupFiles[0]);
            preg_match('/\d{4}-\d{2}-\d{2}_(.+)\.backup$/', $latestBackup, $matches);
            
            $deviceIp = basename($deviceDir);
            $devices[] = [
                'name' => $matches[1] ?? $deviceIp,
                'ip' => $deviceIp,
                'backups_count' => count($backupFiles),
                'last_backup' => date('Y-m-d H:i:s', filemtime($backupFiles[0]))
            ];
        }
        
        $this->logger->debug('telegram', sprintf(
            '–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %d (%s)',
            count($devices),
            implode(', ', array_column($devices, 'name'))
        ));
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $message = "<b>üìä –û—Ç—á–µ—Ç –æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö MikroTik</b>\n\n";
        $message .= "<pre>"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        $message .= sprintf(
            "%-20s %-15s %-7s %-19s\n",
            "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "IP", "–ö–æ–ø–∏–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø"
        );
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        $message .= str_repeat("-", 65) . "\n";
        
        // –î–∞–Ω–Ω—ã–µ
        foreach ($devices as $device) {
            $message .= sprintf(
                "%-20s %-15s %-7d %-19s\n",
                mb_strimwidth($device['name'], 0, 20, "..."),
                $device['ip'],
                $device['backups_count'],
                $device['last_backup']
            );
        }
        
        $message .= "</pre>\n\n";
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $totalDevices = count($devices);
        $totalBackups = array_sum(array_column($devices, 'backups_count'));
        
        $message .= "üì± –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $totalDevices\n";
        $message .= "üíæ –í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $totalBackups\n";
        $message .= "üìÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " . date('Y-m-d H:i:s');
        
        $this->logger->debug('telegram', '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π: ' . strlen($message));
        $this->logger->debug('telegram', '–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è: ' . substr($message, 0, 100));
        
        $this->sendMessage($message);
    }
} 